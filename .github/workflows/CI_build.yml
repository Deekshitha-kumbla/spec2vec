name: CI Build

on:
  push:
  pull_request:
    types: [opened, reopened]

jobs:

  first_check:
    name: first code check / python-3.8 / ubuntu-latest
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.8  
      - name: Python info
        run: |
          which python
          python --version
      - name: Build package and create dev environment
        run: |
          python -m pip install --upgrade pip
          python setup.py build
          pip install -e .[dev]
      - name: Test with coverage
        run: |
          pytest --cov --cov-report term --cov-report xml --junitxml=xunit-result.xml
      - name: Correct coverage paths
        run: sed -i "s+$PWD/++g" coverage.xml
      - name: Check style against standards using prospector
        shell: bash -l {0}
        run: prospector -o grouped -o pylint:pylint-report.txt
      - name: Check whether import statements are used consistently
        shell: bash -l {0}
        run: isort --check-only --diff --conda-env spec2vec-dev --recursive --wrap-length 79 --lines-after-imports 2 --force-single-line --no-lines-before FUTURE --no-lines-before STDLIB --no-lines-before THIRDPARTY --no-lines-before FIRSTPARTY --no-lines-before LOCALFOLDER spec2vec/ tests/ integration-tests/
          
  build_pypi:
    name: Pypi build / python-${{ matrix.python-version }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: first_check
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        python-version: ['3.7', '3.8', '3.9']
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Python info
        run: |
          which python
          python --version
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
      - name: Build
        run: |
          python setup.py build
      - name: Show pip list
        run: |
          pip list
      - name: Test
        run: |
          pip install -e .[dev]
          pytest
      - name: SonarCloud Scan
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version == '3.8' }}
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  anaconda_analyze:
    name: Anaconda analyze / python-${{ matrix.python-version }} / ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: first_check
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        python-version: ["3.8"]
        include:
          - os: 'ubuntu-latest'
            python-version: "3.7"
          - os: 'ubuntu-latest'
            python-version: "3.9"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - uses: goanpeca/setup-miniconda@v1
        with:
          activate-environment: spec2vec-dev
          auto-update-conda: true
          environment-file: conda/environment-dev.yml
          python-version: ${{ matrix.python-version }}
      - name: Show conda config
        shell: bash -l {0}
        run: |
          conda info
          conda list
          conda config --show-sources
          conda config --show
      - name: Python info
        shell: bash -l {0}
        run: |
          which python
          python --version
      - name: Show environment variables
        shell: bash -l {0}
        run: |
          env | sort
      - name: Build documentation
        shell: bash -l {0}
        run: |
          make coverage doctest html
        working-directory: readthedocs/
        env:
          SPHINXOPTS: "-n"  # enable nit-picky mode
      - name: Check documentation coverage threshold
        if: matrix.os == 'ubuntu-latest'
        run: |
          cat readthedocs/_build/coverage/python.txt
          UNCOVERED_MEMBERS=$(grep '*' readthedocs/_build/coverage/python.txt | wc -l)
          UNCOVERED_MEMBERS_ALLOWED=10
          if (( $UNCOVERED_MEMBERS > $UNCOVERED_MEMBERS_ALLOWED )) ; then echo "There are currently ${UNCOVERED_MEMBERS} uncovered members in the documentation, which is more than the ${UNCOVERED_MEMBERS_ALLOWED} allowed." && exit 1;fi
          echo "The code is sufficiently documented with ${UNCOVERED_MEMBERS} uncovered members out of ${UNCOVERED_MEMBERS_ALLOWED} allowed.";

  anaconda_build:
    name: Anaconda build / python-${{ matrix.python-version }} / ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        python-version: ["3.7"]
    runs-on: ${{ matrix.os }}
    needs: first_check
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - name: Create spec2vec-build environment
        uses: goanpeca/setup-miniconda@v1
        with:
          activate-environment: spec2vec-build
          auto-update-conda: true
          environment-file: conda/environment-build.yml
          python-version: ${{ matrix.python-version }}
      - name: Show conda config
        shell: bash -l {0}
        run: |
          conda info
          conda list
          conda config --show-sources
          conda config --show
          conda env list
      - name: Python info
        shell: bash -l {0}
        run: |
          which python
          python --version
      - name: Show environment variables
        shell: bash -l {0}
        run: |
          env | sort
      - name: Build the conda package
        shell: bash -l {0}
        run: |
          export BUILDDIR=$RUNNER_TEMP/spec2vec/_build
          [ "$RUNNING_OS" = "Windows" ] && export BUILDDIR=$RUNNER_TEMP\\spec2vec\\_build\\
          conda config --set anaconda_upload no
          conda build --numpy 1.18.1 --no-include-recipe \
            --channel nlesc --channel bioconda --channel conda-forge \
            --croot ${BUILDDIR} \
            ./conda
      - name: Upload package artifact from build
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v2
        with:
          name: conda-package-artifact
          path: ${{ runner.temp }}/spec2vec/_build

  anaconda_verify:
    name: Anaconda verify / python-${{ matrix.python-version }} / ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        python-version: ['3.7', '3.8']
    runs-on: ${{ matrix.os }}
    needs: anaconda_build
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'
      - name: Create an environment to test the locally published package
        uses: goanpeca/setup-miniconda@v1
        with:
          activate-environment: spec2vec-test
          auto-update-conda: true
          python-version: ${{ matrix.python-version }}
      - name: Show conda config
        shell: bash -l {0}
        run: |
          conda info
          conda list
          conda config --show-sources
          conda config --show
          conda env list
      - name: Python info
        shell: bash -l {0}
        run: |
          which python
          python --version
      - name: Show environment variables
        shell: bash -l {0}
        run: |
          env | sort
      - name: Download conda package from build job
        uses: actions/download-artifact@v2
        with:
          name: conda-package-artifact
          path: ${{ runner.temp }}/spec2vec/_build
      - name: Artifact folder content
        shell: bash -l {0}
        run: |
          export BUILDDIR=$RUNNER_TEMP/spec2vec/_build/noarch/
          [ "$RUNNING_OS" = "Windows" ] && export BUILDDIR=$RUNNER_TEMP\\spec2vec\\_build\\noarch\\
          echo ${RUNNER_TEMP}/spec2vec/_build
      - name: List artifact folder content
        shell: bash -l {0}
        run: |
          export BUILDDIR=$RUNNER_TEMP/spec2vec/_build/noarch/
          [ "$RUNNING_OS" = "Windows" ] && export BUILDDIR=$RUNNER_TEMP\\spec2vec\\_build\\noarch\\
          ls -al ${RUNNER_TEMP}/spec2vec/_build
      - name: Test locally published conda package
        shell: bash -l {0}
        run: |
          export BUILDDIR=$RUNNER_TEMP/spec2vec/_build/noarch/
          [ "$RUNNING_OS" = "Windows" ] && export BUILDDIR=$RUNNER_TEMP\\spec2vec\\_build\\noarch\\
          conda install \
            --channel bioconda \
            --channel conda-forge \
            --channel nlesc \
            matchms
          # Install spec2vec without nlesc channel to prevent package to be installed from nlesc channel instead of wanted $BUILDDIR channel 
          conda install \
            --channel bioconda \
            --channel conda-forge \
            --channel $BUILDDIR -v \
            spec2vec
      - name: List conda packages
        shell: bash -l {0}
        run: |
          conda list
      - name: Install dev dependencies to run the tests
        shell: bash -l {0}
        run: |
          conda env update --name spec2vec-test --file conda/environment-dev.yml
          conda info
          conda list
      - name: Run tests after installing the package
        shell: bash -l {0}
        run: |
          export TESTDIR=$RUNNER_TEMP/spec2vec/_test
          [ "$RUNNING_OS" = "Windows" ] && export TESTDIR=$RUNNER_TEMP\\spec2vec\\_test\\
          mkdir $TESTDIR
          cp -iRv tests integration-tests $TESTDIR
          cd $TESTDIR
          pytest --ignore="tests/test_version_string_consistency.py"
